#
# Copyright (C) 2001-2011 Ideaworks3D Ltd.
# All Rights Reserved.
#
# This document is protected by copyright, and contains information
# proprietary to Ideaworks3D.
# This file consists of source code released by Ideaworks3D under
# the terms of the accompanying End User License Agreement (EULA).
# Please do not use this program/source code before you have read the
# EULA and have agreed to be bound by its terms.
#
use_legacy_extavailable

include:

#include <s3eTypes.h>

/**
 * @addtogroup s3egroup
 * @{
 */

/**
 * @defgroup facebookapigroup Facebook API Reference
 *
 * This API allows the application to interact with the Facebook
 * website through Facebook Connect.
 *
 * @supported
 * - android
 * - ios
 *
 * For more information on the functionality provided by this API,
 * see the "Facebook" section of the S3E API Documentation.
 */

/**
 * @}
 * @addtogroup facebookapigroup
 * @{
 */

struct s3eFBSession;
struct s3eFBDialog;
struct s3eFBRequest;

/**
 * Response type identifiers.
 *
 * @see s3eFBRequest_ResponseType
 * @par Required Header Files
 * s3eFacebook.h
 */
enum s3eFBResponseType
{
    STRING_TYPE,
    NUMBER_TYPE,
    ARRAY_TYPE,
    DICTIONARY_TYPE,
    UNKNOWN
};

/**
 * Reports the result of login attempt.
 *
 * @par Required Header Files
 * s3eFacebook.h
 */
typedef void (*s3eFBLoginCallbackFn)(s3eFBSession *, s3eResult *, void *);

/**
 * Reports that a dialog has been closed/finished being displayed.
 *
 * @see s3eFBPermissionsDialog
 * @see s3eFBStreamDialog
 * @par Required Header Files
 * s3eFacebook.h
 */
typedef void (*s3eFBDialogCallbackFn)(s3eFBDialog *, s3eResult *, void *);

/**
 * Reports the result of attempt to send a request.
 *
 * @par Required Header Files
 * s3eFacebook.h
 */
typedef void (*s3eFBRequestCallbackFn)(s3eFBRequest *, s3eResult *, void *);

functions:

/**
 * Initialises a new session with the app id
 *
 * @param apiKey        The application id
 * @return  Pointer to the new session or NULL
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eFBSession* s3eFBInit(const char* appId) NULL run_on_os_thread

/**
 * Terminates a session. Does not delete or cancel outstanding requests.
 *
 * @param session        The session to be terminated.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBTerminate(s3eFBSession* session) S3E_RESULT_ERROR run_on_os_thread

/**
 * Log in to Facebook using the session. Can automatically try to resume
 * any previous session but if this cannot be done then the standard Facebook
 * login dialog will be shown.
 *
 * @param session        The session to log in.
 * @param permissions
 * @param numPermissions
 * @param cb             A callback function that will be called when the
 *                       function logs in. Pass NULL if you do not wish to
 *                       use callbacks.
 * @param cbData         User data that will be passed to the callback.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBSession_Login(s3eFBSession* session, s3eFBLoginCallbackFn cb, void* cbData S3E_DEFAULT(NULL), const char** pPermissions S3E_DEFAULT(NULL), int numPermissions S3E_DEFAULT(0)) S3E_RESULT_ERROR run_on_os_thread

/**
 * Log user out. Use this option to force the user to be disconnected if they
 * have previously chosen to stay logged in. This will also delete all Facebook
 * cookies.
 */
s3eResult s3eFBSession_Logout(s3eFBSession* session) S3E_RESULT_ERROR run_on_os_thread

/**
 * Poll the session to determine its logged in status.
 *
 * @param session        The session to poll.
 * @return  S3E_TRUE if the session is logged in.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eBool s3eFBSession_LoggedIn(s3eFBSession* session) S3E_FALSE

/**
 * Get the authentication access token as a string.
 *
 * @param session       The session
 * @return The access token string, or NULL if one is not present.
 * @par Required Header Files
 * s3eFacebook.h
 */
const char* s3eFBSession_AccessToken(s3eFBSession* session) NULL

/**
 * Instantiate a new dialog object. Dialogs may not be re-used and must be
 * deleted using @ref s3eFBDialog_Delete when finished with.
 *
 * @param session       The session
 * @param action        The dialog action to perform.
 *                      e.g. "stream.publish"
 * @return    The new dialog object or NULL.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eFBDialog* s3eFBDialog_WithAction(s3eFBSession* session, const char* action) NULL run_on_os_thread

/**
 * Delete a dialog object
 *
 * @param dialog       The dialog
 * @return  S3E_TRUE if the dialog was deleted.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBDialog_Delete(s3eFBDialog* dialog) S3E_RESULT_ERROR run_on_os_thread

/**
 * Add a new string parameter to the dialog.
 *
 * @param dialog        The request
 * @param name          The name of the new parameter
 * @param value         The value of the new parameter
 * @return  S3E_TRUE if the parameter was added.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBDialog_AddParamString(s3eFBDialog* dialog, const char* name, const char* value) S3E_RESULT_ERROR

/**
 * Add a new integer parameter to the dialog.
 *
 * @param dialog        The dialog
 * @param name          The name of the new parameter
 * @param value         The value of the new parameter
 * @return  S3E_TRUE if the parameter was added.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBDialog_AddParamNumber(s3eFBDialog* dialog, const char* name, int64 value) S3E_RESULT_ERROR

/**
 * Show the dialog
 *
 * @param dialog        The dialog
 * @param cb            A callback function that will be called when the
 *                      dialog completes. Pass NULL if you do not wish to use
 *                      callbacks.
 * @param cdData        User data to be passed to the callback.
 * @return  S3E_TRUE if the dialog was shown.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBDialog_Show(s3eFBDialog* dialog, s3eFBDialogCallbackFn cb, void* cbData S3E_DEFAULT(NULL)) S3E_RESULT_ERROR run_on_os_thread

/**
 * Poll the dialog for an error.
 *
 * @param dialog       The dialog
 * @return  S3E_TRUE is the dialog resulted in an error.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eBool s3eFBDialog_Error(s3eFBDialog* dialog) S3E_FALSE

/**
 * Fetch a failed dialog's error code.
 *
 * @param dialog       The dialog
 * @return  The error code.
 * @par Required Header Files
 * s3eFacebook.h
 */
uint32 s3eFBDialog_ErrorCode(s3eFBDialog* dialog) 0

/**
 * Fetch a string describing the error.
 *
 * @param dialog       The dialog
 * @return  A string describing the error.
 * @par Required Header Files
 * s3eFacebook.h
 */
const char* s3eFBDialog_ErrorString(s3eFBDialog* dialog) NULL

/**
 * Poll the dialog to determine if it's complete
 *
 * @param dialog       The dialog
 * @return S3E_TRUE is the dialog is complete
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eBool s3eFBDialog_Complete(s3eFBDialog* dialog) S3E_FALSE

/**
 * Returns the URL that the dialog did not complete with
 *
 * @param dialog       The dialog
 * @return URL string
 * @par Required Header Files
 * s3eFacebook.h
 */
const char* s3eFBDialog_DidNotCompleteWithUrl(s3eFBDialog* dialog) NULL

/**
 * Instantiate a new request object. Requests may not be re-used and must be
 * deleted using @ref s3eFBRequest_Delete when finished with.
 *
 * @param session       The session
 * @param methodName    The name of the method to be called.
 *                      e.g. "facebook.Users.hasPermission"
 * @param httpMethod    The http method to use.
 *                      e.g. "GET"
 * @return    The new request object or NULL.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eFBRequest* s3eFBRequest_WithMethodName(s3eFBSession* session, const char* methodName, const char* httpMethod S3E_DEFAULT(NULL)) NULL run_on_os_thread

/**
 * Instantiate a new request object. Requests may not be re-used and must be
 * deleted using @ref s3eFBRequest_Delete when finished with.
 *
 * @param session       The session
 * @param graphPath     The graph path for the request.
 *                      e.g. "me"
 * @param httpMethod    The http method to use.
 *                      e.g. "GET"
 * @return    The new request object or NULL.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eFBRequest* s3eFBRequest_WithGraphPath(s3eFBSession* session, const char* graphPath, const char* httpMethod S3E_DEFAULT(NULL)) NULL run_on_os_thread

/**
 * Instantiate a new request object. Requests may not be re-used and must be
 * deleted using @ref s3eFBRequest_Delete when finished with.
 *
 * @param session       The session
 * @param url           The url the request should be sent to.
 * @return    The new request object or NULL.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eFBRequest* s3eFBRequest_WithURL(s3eFBSession* session, const char* url, const char* httpMethod S3E_DEFAULT(NULL)) NULL run_on_os_thread order:1

/**
 * Delete a request object
 *
 * @param request       The request
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBRequest_Delete(s3eFBRequest* request) S3E_RESULT_ERROR run_on_os_thread

/**
 * Add a new string parameter to the request.
 *
 * @param request       The request
 * @param name          The name of the new parameter
 * @param value         The value of the new parameter
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBRequest_AddParamString(s3eFBRequest* request, const char* name, const char* value) S3E_RESULT_ERROR

/**
 * Add a new integer parameter to the request.
 *
 * @param request       The request
 * @param name          The name of the new parameter
 * @param value         The value of the new parameter
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBRequest_AddParamNumber(s3eFBRequest* request, const char* name, int64 value) S3E_RESULT_ERROR

/**
 * Send the request
 *
 * @param request       The request to send
 * @param cb            A callback function that will be called when the
 *                      request completes. Pass NULL if you do not wish to use
 *                      callbacks.
 * @param cdData        User data to be passed to the callback.
 * @return  S3E_TRUE if the request was sent.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eResult s3eFBRequest_Send(s3eFBRequest* request, s3eFBRequestCallbackFn cb, void* cbData S3E_DEFAULT(NULL)) S3E_RESULT_ERROR run_on_os_thread

/**
 * Poll the request for an error.
 *
 * @param request       The request
 * @return  S3E_TRUE if the request resulted in an error.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eBool s3eFBRequest_Error(s3eFBRequest* request) S3E_FALSE

/**
 * Fetch a failed request's error code.
 *
 * @param request       The request
 * @return  The error code.
 * @par Required Header Files
 * s3eFacebook.h
 */
uint32 s3eFBRequest_ErrorCode(s3eFBRequest* request) 0

/**
 * Fetch a string describing the error.
 *
 * @param request       The request
 * @return  A string describing the error.
 * @par Required Header Files
 * s3eFacebook.h
 */
const char* s3eFBRequest_ErrorString(s3eFBRequest* request) NULL

/**
 * Poll the request to determine if it's complete
 *
 * @param request       The request
 * @return S3E_TRUE is the request is complete
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eBool s3eFBRequest_Complete(s3eFBRequest* request) S3E_FALSE

/**
 * Determine the response type.
 *
 * @param request       The request to which the response was sent
 * @return              The response type. Only STRING_TYPE or UNKNOWN are
 *                      currently supported
 * @note This function should be called before examining response content.
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eFBResponseType s3eFBRequest_ResponseType(s3eFBRequest* request) UNKNOWN

/**
 * Retrieve the response. If the response was a string then this is a normal C
 * string. In all other cases it is a copy of the original objective-C object.
 * In all cases the response remains owned by the request object and will be
 * deleted with the request.
 *
 * @param request       The request to which the response was sent
 * @return The string or response object.
 * @par Required Header Files
 * s3eFacebook.h
 */
const char* s3eFBRequest_ResponseRaw(s3eFBRequest* request) NULL

/**
 * Retrieve the response string.
 *
 * @param request       The request to which the response was sent
 * @return The response string.
 * @par Required Header Files
 * s3eFacebook.h
 */
const char* s3eFBRequest_ResponseAsString(s3eFBRequest* request) NULL

/**
 * Retrieve the response number.
 *
 * @param request       The request to which the response was sent
 * @return The response number.
 * @par Required Header Files
 * s3eFacebook.h
 */
int64 s3eFBRequest_ResponseAsNumber(s3eFBRequest* request) 0

/**
 * Retrieve the count of items in the response array.
 *
 * @param request       The request to which the response was sent
 * @return The array count.
 * @par Required Header Files
 * s3eFacebook.h
 */
int s3eFBRequest_ResponseArrayCount(s3eFBRequest* request) 0

/**
 * Retrieve the response item at a given index in the response array as a string.
 *
 * @param request       The request to which the response was sent
 * @param index         Index into response array
 * @return The response string, or NULL if index out of bounds.
 * @par Required Header Files
 * s3eFacebook.h
 */
const char* s3eFBRequest_ResponseArrayItemAsString(s3eFBRequest* request, int index) NULL

/**
 * Query if there is a value for the given key in the response dictionary.
 *
 * @param request       The request to which the response was sent
 * @param key           The key to look for a value for
 * @return S3E_TRUE if the response dictionary contains the key
 * @par Required Header Files
 * s3eFacebook.h
 */
s3eBool s3eFBRequest_ResponseDictionaryContainsItem(s3eFBRequest* request, const char* key) S3E_FALSE

/**
 * Retrieve the response item at for the given key in the response dictionary
 * as a string
 *
 * @param request       The request to which the response was sent
 * @param key           The key to look for a value for
 * @return The response string, or NULL if not present.
 * @par Required Header Files
 * s3eFacebook.h
 */
const char* s3eFBRequest_ResponseDictionaryItemAsString(s3eFBRequest* request, const char* key) NULL

append:
/** @} */
